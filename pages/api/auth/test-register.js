// Test registrace pro OAuth testy - pouze pro demo √∫ƒçely
// V produkci by toto bylo p≈ôipojeno k datab√°zi

let testUsers = [
  {
    id: "1",
    email: "test@cloudvps.cz",
    password: "test123",
    name: "Test User",
    image: null,
    createdAt: new Date().toISOString()
  },
  {
    id: "2", 
    email: "admin@cloudvps.cz",
    password: "admin123",
    name: "Admin User",
    image: null,
    createdAt: new Date().toISOString()
  },
  {
    id: "3",
    email: "demo@cloudvps.cz", 
    password: "demo123",
    name: "Demo User",
    image: "https://via.placeholder.com/150/0000FF/FFFFFF?text=Demo",
    createdAt: new Date().toISOString()
  }
];

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { email, password, name } = req.body;

  // Validace
  if (!email || !password || !name) {
    return res.status(400).json({ 
      success: false,
      error: 'V≈°echna pole jsou povinn√°',
      details: 'Email, heslo a jm√©no mus√≠ b√Ωt vyplnƒõny'
    });
  }

  // Kontrola form√°tu emailu
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ 
      success: false,
      error: 'Neplatn√Ω form√°t emailu',
      details: 'Zadejte platnou emailovou adresu'
    });
  }

  // Kontrola d√©lky hesla
  if (password.length < 6) {
    return res.status(400).json({ 
      success: false,
      error: 'Heslo je p≈ô√≠li≈° kr√°tk√©',
      details: 'Heslo mus√≠ m√≠t alespo≈à 6 znak≈Ø'
    });
  }

  // Kontrola, zda u≈æivatel ji≈æ existuje
  const existingUser = testUsers.find(user => user.email === email);
  if (existingUser) {
    console.log('‚ÑπÔ∏è User already exists, returning success for login flow');

    // Vr√°t√≠me √∫spƒõ≈°nou odpovƒõƒè s informac√≠ o existuj√≠c√≠m u≈æivateli
    const { password: _, ...userWithoutPassword } = existingUser;

    return res.status(200).json({
      success: true,
      message: 'U≈æivatel s t√≠mto emailem ji≈æ existuje',
      user: userWithoutPassword,
      existingUser: true // Oznaƒçen√≠, ≈æe se jedn√° o existuj√≠c√≠ho u≈æivatele
    });
  }

  // Vytvo≈ôen√≠ nov√©ho u≈æivatele
  const newUser = {
    id: (testUsers.length + 1).toString(),
    email,
    password, // V produkci by bylo hashovan√©
    name,
    image: null,
    createdAt: new Date().toISOString()
  };

  // P≈ôid√°n√≠ do "datab√°ze"
  testUsers.push(newUser);

  // Vytvo≈ôen√≠ klienta v HostBill p≈ôes middleware
  try {
    console.log('üîÑ Creating client in HostBill for email registration...');

    // Rozdƒõlen√≠ jm√©na na k≈ôestn√≠ jm√©no a p≈ô√≠jmen√≠
    const nameParts = name.trim().split(' ');
    const firstName = nameParts[0] || '';
    const lastName = nameParts.slice(1).join(' ') || '';

    const clientData = {
      email: email,
      firstName: firstName,
      lastName: lastName,
      companyName: '', // Pr√°zdn√© pro osobn√≠ √∫ƒçty
      address: '',
      city: '',
      state: '',
      postcode: '',
      country: 'CZ',
      phonenumber: ''
    };

    const middlewareUrl = process.env.MIDDLEWARE_URL || 'http://localhost:3005';
    const response = await fetch(`${middlewareUrl}/api/client/create`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(clientData)
    });

    const hostbillResult = await response.json();

    if (hostbillResult.success) {
      console.log('‚úÖ Client created in HostBill:', {
        clientId: hostbillResult.client.id,
        email: email,
        name: name
      });
    } else {
      console.warn('‚ö†Ô∏è Failed to create client in HostBill:', hostbillResult.error);
      // Pokraƒçujeme i kdy≈æ se nepoda≈ô√≠ vytvo≈ôit klienta v HostBill
    }
  } catch (error) {
    console.error('‚ùå Error creating client in HostBill:', error.message);
    // Pokraƒçujeme i kdy≈æ se nepoda≈ô√≠ vytvo≈ôit klienta v HostBill
  }

  // Vr√°cen√≠ √∫spƒõ≈°n√© odpovƒõdi (bez hesla)
  const { password: _, ...userWithoutPassword } = newUser;

  res.status(201).json({
    success: true,
    message: 'U≈æivatel byl √∫spƒõ≈°nƒõ zaregistrov√°n',
    user: userWithoutPassword
  });
}

// Export pro pou≈æit√≠ v authorize funkci
export function getTestUsers() {
  return testUsers;
}
