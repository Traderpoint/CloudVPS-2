import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import Head from 'next/head';
import { useCart } from '../contexts/CartContext';
import ShoppingCart, { CartIcon } from '../components/ShoppingCart';

export default function PaymentMethod() {
  const router = useRouter();
  const { items, getTotalPrice } = useCart();
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [orderData, setOrderData] = useState(null);
  const [paymentMethods, setPaymentMethods] = useState([]);
  const [selectedPayment, setSelectedPayment] = useState('comgate');
  const [isLoading, setIsLoading] = useState(false);
  const [loadingMethods, setLoadingMethods] = useState(true);
  const [error, setError] = useState('');

  // Load order data and payment methods on mount
  useEffect(() => {
    const storedOrderData = sessionStorage.getItem('orderData');
    if (storedOrderData) {
      const data = JSON.parse(storedOrderData);
      setOrderData(data);
    } else {
      // Redirect to billing if no order data
      router.push('/billing');
    }

    loadPaymentMethods();
  }, [router]);

  const loadPaymentMethods = async () => {
    try {
      setLoadingMethods(true);
      console.log('üîç Loading payment methods from middleware...');

      // Use EXACT same endpoint as real-payment-flow-test
      const response = await fetch('http://localhost:3005/api/payment-modules');
      const data = await response.json();

      if (data.success && data.modules) {
        // Transform middleware response to expected format
        const availableMethods = data.modules.map(module => ({
          id: module.method,
          name: module.name,
          method: module.method,
          type: module.type,
          enabled: module.enabled,
          icon: module.icon,
          description: module.description
        }));

        // Put Comgate first as requested
        const sortedMethods = availableMethods.sort((a, b) => {
          if (a.method === 'comgate') return -1;
          if (b.method === 'comgate') return 1;
          return 0;
        });

        setPaymentMethods(sortedMethods);
        console.log('‚úÖ Payment methods loaded:', sortedMethods);

        // Set Comgate as default if available
        if (sortedMethods.length > 0) {
          const comgateMethod = sortedMethods.find(m => m.method === 'comgate');
          const defaultMethod = comgateMethod ? comgateMethod.method : sortedMethods[0].method;
          setSelectedPayment(defaultMethod);
          console.log('üéØ Default payment method set:', defaultMethod);
        }
      } else {
        console.error('‚ùå Failed to load payment methods:', data.error);
        throw new Error(data.error || 'Failed to load payment methods');
      }
    } catch (error) {
      console.error('‚ùå Error loading payment methods:', error);
      // Fallback to static methods with Comgate first
      const fallbackMethods = getStaticPaymentMethods();
      setPaymentMethods(fallbackMethods);
      setSelectedPayment('comgate');
    } finally {
      setLoadingMethods(false);
    }
  };

  const getStaticPaymentMethods = () => {
    return [
      {
        id: 'comgate',
        method: 'comgate',
        name: 'Platebn√≠ karta',
        icon: 'üí≥',
        description: 'Visa, Mastercard, American Express',
        processingTime: 'Okam≈æitƒõ',
        enabled: true,
        type: 'gateway'
      },
      {
        id: 'paypal',
        method: 'paypal',
        name: 'PayPal',
        icon: 'üÖøÔ∏è',
        description: 'Platba p≈ôes PayPal √∫ƒçet',
        processingTime: 'Okam≈æitƒõ',
        enabled: true,
        type: 'gateway'
      }
    ];
  };

  const handleSubmitPayment = async () => {
    if (!orderData || !selectedPayment) {
      setError('Chyb√≠ √∫daje objedn√°vky nebo platebn√≠ metoda');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      console.log('üîÑ Initializing payment with method:', selectedPayment);

      // Step 2: Initialize payment according to real-payment-flow-test
      const firstOrder = orderData.orders?.[0];
      if (!firstOrder || !firstOrder.invoice_id) {
        throw new Error('Chyb√≠ √∫daje objedn√°vky nebo faktury');
      }

      const paymentResponse = await fetch('/api/payments/initialize', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          orderId: firstOrder.order_id,
          invoiceId: firstOrder.invoice_id,
          method: selectedPayment,
          amount: firstOrder.price || 604,
          currency: 'CZK'
        })
      });

      const paymentResult = await paymentResponse.json();

      if (paymentResult.success) {
        console.log('‚úÖ Payment initialized successfully:', paymentResult);

        if (paymentResult.paymentUrl) {
          // Redirect to payment gateway
          console.log('üîÑ Redirecting to payment gateway:', paymentResult.paymentUrl);
          window.location.href = paymentResult.paymentUrl;
        } else {
          // Handle other payment methods or errors
          console.log('‚ÑπÔ∏è No payment URL provided, handling alternative flow');
          router.push('/payment-success');
        }
      } else {
        throw new Error(paymentResult.error || 'Nepoda≈ôilo se inicializovat platbu');
      }
    } catch (error) {
      console.error('‚ùå Payment initialization error:', error);
      setError('Do≈°lo k chybƒõ p≈ôi inicializaci platby. Zkuste to pros√≠m znovu.');
    } finally {
      setIsLoading(false);
    }
  };

  if (!orderData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Naƒç√≠t√°n√≠...</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Platebn√≠ metoda - Cloud VPS</title>
        <meta name="description" content="Vyberte si platebn√≠ metodu pro va≈°i objedn√°vku" />
      </Head>

      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 py-8">
        <div className="container mx-auto px-4 max-w-6xl">
          {/* Header s ko≈°√≠kem */}
          <div className="mb-8 flex justify-between items-center">
            <Link href="/billing" className="inline-flex items-center text-gray-600 hover:text-gray-800">
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              Zpƒõt na fakturaƒçn√≠ √∫daje
            </Link>

            {/* Ko≈°√≠k */}
            <div className="relative">
              <button
                onClick={() => setIsCartOpen(!isCartOpen)}
                className="relative p-2 text-gray-600 hover:text-gray-800 transition-colors"
              >
                <CartIcon />
                {items.length > 0 && (
                  <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                    {items.length}
                  </span>
                )}
              </button>
              <ShoppingCart isOpen={isCartOpen} onClose={() => setIsCartOpen(false)} />
            </div>
          </div>

          <div className="grid lg:grid-cols-3 gap-8">
            {/* V√Ωbƒõr platebn√≠ metody */}
            <div className="lg:col-span-2">
              {/* Souhrn fakturaƒçn√≠ch √∫daj≈Ø */}
              <div className="bg-white rounded-xl shadow-lg p-6 mb-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-green-500 text-white rounded-full flex items-center justify-center">
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                      </svg>
                    </div>
                    <div>
                      <h3 className="font-semibold">Fakturaƒçn√≠ adresa</h3>
                    <p className="text-sm text-gray-600">
                      {orderData.billingData?.firstName} {orderData.billingData?.lastName}
                    </p>
                    <p className="text-sm text-gray-600">{orderData.billingData?.country}</p>
                  </div>
                </div>
                <Link href="/billing" className="text-primary-600 hover:text-primary-700 text-sm">
                  Upravit
                </Link>
              </div>
            </div>

            {/* Platebn√≠ metoda */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-center space-x-3 mb-6">
                <div className="w-8 h-8 bg-primary-600 text-white rounded-full flex items-center justify-center font-bold">
                  2
                </div>
                <h2 className="text-xl font-bold">Platba</h2>
              </div>

              {error && (
                <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm mb-6">
                  {error}
                </div>
              )}

              {loadingMethods ? (
                <div className="text-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4"></div>
                  <p className="text-gray-600">Naƒç√≠t√°n√≠ platebn√≠ch metod...</p>
                </div>
              ) : (
                <div className="space-y-4">
                  <p className="text-sm text-gray-600 mb-4">Vyberte platebn√≠ metodu:</p>
                  
                  {paymentMethods.map((method) => (
                    <div
                      key={method.id || method.method}
                      className={`border-2 rounded-lg p-4 cursor-pointer transition-all ${
                        selectedPayment === (method.method || method.id)
                          ? 'border-primary-500 bg-primary-50'
                          : 'border-gray-200 hover:border-gray-300'
                      }`}
                      onClick={() => setSelectedPayment(method.method || method.id)}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="text-2xl">{method.icon || 'üí≥'}</div>
                          <div>
                            <div className="font-semibold">{method.name}</div>
                            <div className="text-sm text-gray-600">{method.description}</div>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {(method.method || method.id) === 'comgate' && (
                            <div className="flex space-x-2">
                              {/* Visa logo */}
                              <div className="bg-blue-600 text-white px-2 py-1 rounded text-xs font-bold">
                                VISA
                              </div>
                              {/* Mastercard logo */}
                              <div className="bg-red-500 text-white px-2 py-1 rounded text-xs font-bold">
                                MC
                              </div>
                              {/* American Express logo */}
                              <div className="bg-blue-500 text-white px-2 py-1 rounded text-xs font-bold">
                                AMEX
                              </div>
                            </div>
                          )}
                          <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>

                      {/* Card Form for Comgate */}
                      {selectedPayment === (method.method || method.id) && (method.method || method.id) === 'comgate' && (
                        <div className="mt-4 pt-4 border-t border-gray-200 space-y-4">
                          <div className="grid md:grid-cols-2 gap-4">
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                Jm√©no na kartƒõ
                              </label>
                              <input
                                type="text"
                                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                ƒå√≠slo karty
                              </label>
                              <input
                                type="text"
                                placeholder="0000 0000 0000 0000"
                                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                              />
                            </div>
                          </div>
                          <div className="grid md:grid-cols-2 gap-4">
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                Datum expirace
                              </label>
                              <input
                                type="text"
                                placeholder="MM / RR"
                                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-2">
                                CVC/CVV
                              </label>
                              <input
                                type="text"
                                placeholder="123"
                                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                              />
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  ))}

                  {/* PayPal Option */}
                  {!paymentMethods.find(m => m.id === 'paypal') && (
                    <div className="border-2 border-gray-200 rounded-lg p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3">
                          <div className="text-2xl">üÖøÔ∏è</div>
                          <div>
                            <div className="font-semibold">PayPal</div>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <svg className="w-8 h-8 text-blue-600" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M7.076 21.337H2.47a.641.641 0 0 1-.633-.74L4.944.901C5.026.382 5.474 0 5.998 0h7.46c2.57 0 4.578.543 5.69 1.81 1.01 1.15 1.304 2.42 1.012 4.287-.023.143-.047.288-.077.437-.983 5.05-4.349 6.797-8.647 6.797h-2.19c-.524 0-.968.382-1.05.9l-1.12 7.106zm14.146-14.42a3.35 3.35 0 0 0-.607-.541c-.013.076-.026.175-.041.26-.93 4.778-4.005 6.405-7.974 6.405h-2.19c-.524 0-.968.382-1.05.9L7.076 21.337H2.47a.641.641 0 0 1-.633-.74L4.944.901C5.026.382 5.474 0 5.998 0h7.46c2.57 0 4.578.543 5.69 1.81.515.588.848 1.26.974 2.107z"/>
                          </svg>
                          <svg className="w-5 h-5 text-gray-400 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                          </svg>
                        </div>
                      </div>
                    </div>
                  )}

                  <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                    <div className="flex items-center space-x-2 text-sm text-gray-600">
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                      </svg>
                      <span>≈†ifrovan√© a bezpeƒçn√© platby</span>
                    </div>
                  </div>

                  <div className="mt-6 text-xs text-gray-500">
                    <p>
                      Dokonƒçen√≠m objedn√°vky souhlas√≠te s na≈°imi{' '}
                      <Link href="/terms" className="text-primary-600 hover:text-primary-700">
                        Obchodn√≠mi podm√≠nkami
                      </Link>{' '}
                      a potvrzujete, ≈æe jste si p≈ôeƒçetli na≈°e{' '}
                      <Link href="/privacy" className="text-primary-600 hover:text-primary-700">
                        Z√°sady ochrany osobn√≠ch √∫daj≈Ø
                      </Link>
                      . Opakovan√© platby m≈Ø≈æete kdykoli zru≈°it.
                    </p>
                  </div>

                  <button
                    onClick={handleSubmitPayment}
                    disabled={isLoading || !selectedPayment}
                    className="w-full bg-primary-600 text-white py-3 rounded-lg font-semibold hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors mt-6"
                  >
                    {isLoading ? 'Zpracov√°n√≠...' : 'Dokonƒçit platbu'}
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* Souhrn objedn√°vky */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-xl shadow-lg p-6 sticky top-8">
              <h3 className="text-xl font-bold mb-4">Souhrn objedn√°vky</h3>
              
              {/* Order Items */}
              {orderData.orders && orderData.orders.map((order, index) => (
                <div key={index} className="border-b border-gray-200 pb-4 mb-4">
                  <div className="flex justify-between items-start">
                    <div>
                      <h4 className="font-semibold">KVM 2</h4>
                      <p className="text-sm text-gray-600">24-mƒõs√≠ƒçn√≠ pl√°n</p>
                    </div>
                    <div className="text-right">
                      <div className="line-through text-gray-400 text-sm">US$ 43.99</div>
                      <div className="font-semibold">US$ 167.76</div>
                    </div>
                  </div>
                </div>
              ))}

              {/* DPH */}
              <div className="mb-4">
                <div className="flex justify-between text-sm">
                  <span>DPH (21%)</span>
                  <span>US$ 35.23</span>
                </div>
              </div>

              {/* Celkem */}
              <div className="border-t border-gray-200 pt-4">
                <div className="flex justify-between font-bold text-lg">
                  <span>Celkem</span>
                  <div className="text-right">
                    <div className="line-through text-gray-400 text-sm">US$ 466.99</div>
                    <div>US$ 202.99</div>
                  </div>
                </div>
              </div>

              {/* Slevov√Ω k√≥d */}
              <div className="mt-4">
                <Link href="#" className="text-primary-600 hover:text-primary-700 text-sm">
                  M√°te slevov√Ω k√≥d?
                </Link>
              </div>

              {/* 30denn√≠ z√°ruka */}
              <div className="flex items-center space-x-2 mt-6 text-sm text-gray-600">
                <svg className="w-5 h-5 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span>30denn√≠ z√°ruka vr√°cen√≠ penƒõz</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
