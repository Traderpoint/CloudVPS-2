/**
 * Fix Failed Payment Script
 * Rychl√© ≈ôe≈°en√≠ pro "Authorize Payment: Failed" probl√©m
 * Pou≈æit√≠: node fix-failed-payment.js [orderId] [invoiceId] [transactionId]
 */

const MIDDLEWARE_URL = 'http://localhost:3005';

// Parametry z command line nebo v√Ωchoz√≠ hodnoty
const orderId = process.argv[2] || '426';
const invoiceId = process.argv[3] || '446';
const transactionId = process.argv[4] || `FIX-${Date.now()}`;
const amount = process.argv[5] || 100;

console.log('üîß Fix Failed Payment Script');
console.log('============================');
console.log(`Order ID: ${orderId}`);
console.log(`Invoice ID: ${invoiceId}`);
console.log(`Transaction ID: ${transactionId}`);
console.log(`Amount: ${amount} CZK`);
console.log('');

async function fixFailedPayment() {
  try {
    console.log('üöÄ Spou≈°t√≠m Gateway Bypass ≈ôe≈°en√≠...');
    console.log('===================================');
    
    const workflowData = {
      orderId: orderId,
      invoiceId: invoiceId,
      transactionId: transactionId,
      amount: parseFloat(amount),
      currency: 'CZK',
      paymentMethod: 'comgate',
      notes: `Payment fixed via Gateway Bypass - ${transactionId}`
    };
    
    console.log('üì§ Odes√≠l√°m request...');
    
    const response = await fetch(`${MIDDLEWARE_URL}/api/payments/authorize-capture`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(workflowData)
    });
    
    const result = await response.json();
    
    console.log('üì• V√Ωsledek:');
    console.log('============');
    console.log(`‚úÖ Success: ${result.success}`);
    console.log(`üìù Message: ${result.message}`);
    console.log('');
    
    if (result.workflow) {
      console.log('üîÑ Workflow Status:');
      console.log(`   Authorize Payment: ${getStatusIcon(result.workflow.authorizePayment)} ${result.workflow.authorizePayment}`);
      console.log(`   Capture Payment: ${getStatusIcon(result.workflow.capturePayment)} ${result.workflow.capturePayment}`);
      console.log(`   Provision: ${getStatusIcon(result.workflow.provision)} ${result.workflow.provision}`);
      console.log('');
    }
    
    if (result.details) {
      console.log('üìã Detaily:');
      if (result.details.authorize) {
        console.log(`   Authorize: ${result.details.authorize.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);
        if (result.details.authorize.method) {
          console.log(`     Method: ${result.details.authorize.method}`);
        }
      }
      if (result.details.capture) {
        console.log(`   Capture: ${result.details.capture.success ? '‚úÖ SUCCESS' : '‚ùå FAILED'}`);
        if (result.details.capture.method) {
          console.log(`     Method: ${result.details.capture.method}`);
        }
        if (result.details.capture.payment_id) {
          console.log(`     Payment ID: ${result.details.capture.payment_id}`);
        }
      }
      console.log('');
    }
    
    if (result.nextSteps && result.nextSteps.length > 0) {
      console.log('üìù Dal≈°√≠ kroky:');
      result.nextSteps.forEach((step, index) => {
        console.log(`   ${index + 1}. ${step}`);
      });
      console.log('');
    }
    
    // Shrnut√≠
    const allSuccess = result.success && 
                      result.workflow.authorizePayment === 'completed' &&
                      result.workflow.capturePayment === 'completed';
    
    if (allSuccess) {
      console.log('üéâ PROBL√âM VY≈òE≈†EN!');
      console.log('==================');
      console.log('‚úÖ Authorize Payment: Failed ‚Üí Completed');
      console.log('‚úÖ Capture Payment: Pending ‚Üí Completed');
      console.log('‚úÖ Provision: Pending ‚Üí Ready');
      console.log('');
      console.log('üîß Pou≈æit√© ≈ôe≈°en√≠:');
      console.log('   ‚Ä¢ P≈ô√≠m√© API vol√°n√≠ m√≠sto gateway');
      console.log('   ‚Ä¢ setOrderActive pro aktivaci objedn√°vky');
      console.log('   ‚Ä¢ addInvoicePayment pro p≈ôid√°n√≠ platby');
      console.log('   ‚Ä¢ runProvisioningHooks pro spu≈°tƒõn√≠ provisioningu');
      console.log('');
      console.log('üìä Zkontroluj HostBill admin panel pro potvrzen√≠ zmƒõn.');
    } else {
      console.log('‚ùå PROBL√âM NEBYL VY≈òE≈†EN');
      console.log('========================');
      console.log('Zkontroluj chybov√© hl√°≈°ky v√Ω≈°e a zkus znovu.');
      
      if (!result.success) {
        console.log(`‚ùå Workflow selhal: ${result.message}`);
      }
      if (result.workflow.authorizePayment !== 'completed') {
        console.log(`‚ùå Authorize selhalo: ${result.workflow.authorizePayment}`);
      }
      if (result.workflow.capturePayment !== 'completed') {
        console.log(`‚ùå Capture selhalo: ${result.workflow.capturePayment}`);
      }
    }

  } catch (error) {
    console.error('‚ùå Chyba p≈ôi opravƒõ platby:', error.message);
    console.error('');
    console.error('üîß Mo≈æn√° ≈ôe≈°en√≠:');
    console.error('   1. Zkontroluj, ≈æe middleware bƒõ≈æ√≠ na portu 3005');
    console.error('   2. Zkontroluj HostBill API credentials');
    console.error('   3. Zkontroluj network connectivity');
    console.error('   4. Zkus znovu za chv√≠li');
  }
}

function getStatusIcon(status) {
  switch (status) {
    case 'completed': return '‚úÖ';
    case 'failed': return '‚ùå';
    case 'pending': return 'üîÑ';
    case 'skipped': return '‚è≠Ô∏è';
    case 'ready': return '‚úÖ';
    default: return '‚ö†Ô∏è';
  }
}

// Zobraz usage pokud jsou ≈°patn√© parametry
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  console.log('üìñ Pou≈æit√≠:');
  console.log('===========');
  console.log('node fix-failed-payment.js [orderId] [invoiceId] [transactionId] [amount]');
  console.log('');
  console.log('P≈ô√≠klady:');
  console.log('  node fix-failed-payment.js 426 446 TXN123 100');
  console.log('  node fix-failed-payment.js 405 451 PAYMENT789 362');
  console.log('');
  console.log('V√Ωchoz√≠ hodnoty:');
  console.log('  orderId: 426');
  console.log('  invoiceId: 446');
  console.log('  transactionId: FIX-{timestamp}');
  console.log('  amount: 100');
  process.exit(0);
}

// Spus≈• opravu
fixFailedPayment();
